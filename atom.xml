<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuangy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hellolife.top/"/>
  <updated>2018-08-01T08:17:45.431Z</updated>
  <id>http://hellolife.top/</id>
  
  <author>
    <name>yuangy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Erlang基础</title>
    <link href="http://hellolife.top/2018/08/01/erlang%E5%9F%BA%E7%A1%80/"/>
    <id>http://hellolife.top/2018/08/01/erlang基础/</id>
    <published>2018-08-01T07:42:48.471Z</published>
    <updated>2018-08-01T08:17:45.431Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>Erlang：函数式编程，消息传递，容错，高并发。</strong><br><a id="more"></a></p><hr><h3 id="语句和注释"><a href="#语句和注释" class="headerlink" title="语句和注释"></a>语句和注释</h3><ol><li>“ . ”作为一条语句结束（参考英语句子）</li><li>“ ; ”连接的语句表示“或”，“ , ”连接的语句表示“且” (参考when关卡)</li><li>“%”来做行注释<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&gt; F = fun(A,B) when is_number(A),is_number(B) -&gt; A+B end. </span><br><span class="line"><span class="comment">#Fun&lt;erl_eval.12.52032458&gt;</span></span><br><span class="line">2&gt; F(3,4).  </span><br><span class="line">7</span><br><span class="line">3&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ol><li><strong>number：</strong>erlang中的整数是精确到，也就是说不像其他编程语言（java）中有short，int，long的说法。</li><li><strong>浮点数：</strong>erlang在内部使用64位的<em>IEEE754-1985</em>，因此也会存在像C中的取整和精度问题。</li><li><strong>原子：</strong>原子被用来表示常量值（类似java中的枚举），<code>原子是全局性的，而且不需要宏定义或包含文件就能实现，原子以小写字母开头，后接一串字母、数字、下划线、@符号，原子还可以放在单引号&#39;&#39;内，这样定义原子的规则便没那么严格了，例如&#39;Monday&#39;、&#39;+&#39;,另外，原子的值就是原子本身。</code></li><li><strong>元组：</strong>大括号包起来，里面用逗号隔开的一种erlang数据类型，通常元组第一位用一个语义化的原子值占位。</li><li><strong>列表：</strong>被用来存放任意数据类型任意数量的数据类型，类似js中的数组。</li><li><strong>字符串：</strong>双引号包起来，严格来说，erlang中没有字符串，其本质就是列表。所以一般如果你想用真·字符串的时候，用Erlang的Binary类型，这样表示：&lt;&lt;”abc”&gt;&gt;。</li><li><strong>二进制型与位串：</strong>在二进制里使用整数时，必须属于0~255这个范围。二进制型&lt;&lt;”cat”&gt;&gt;是&lt;&lt;99,97,116&gt;&gt;的简写形式，也就是说，这个二进制型是由字符串里这些字符的ASCII编码组成的。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1&gt; 1. %% 整数</span><br><span class="line">1</span><br><span class="line">2&gt; 1.2 . %% 浮点数</span><br><span class="line">1.2</span><br><span class="line">3&gt; a. %% 原子</span><br><span class="line">a</span><br><span class="line">4&gt; &#123;point,1,2&#125;. %% 元组</span><br><span class="line">&#123;point,1,2&#125;</span><br><span class="line">5&gt; [1,2,3]. %% 列表</span><br><span class="line">[1,2,3]</span><br><span class="line">6&gt; <span class="string">"1,2,3"</span>. %% 字符串</span><br><span class="line"><span class="string">"1,2,3"</span></span><br><span class="line">7&gt; &lt;&lt;<span class="string">"cat"</span>&gt;&gt;. %% 二进制与位串</span><br><span class="line">&lt;&lt;<span class="string">"cat"</span>&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="变量与模式匹配"><a href="#变量与模式匹配" class="headerlink" title="变量与模式匹配"></a>变量与模式匹配</h3><p>erlang中<code>不存在赋值</code>的概念，只有<code>变量绑定值</code>，而且一次绑定不可改变，即“一次性赋值”。变量必须首字母大写。变量与值绑定用“=”表示，称为一次模式匹配操作。<br><strong>模式匹配的一些例子：</strong></p><table><thead><tr><th>模式 = 单位</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td> {X,abc} = {123,abc}</td><td style="text-align:left">成功:X=123 </td></tr><tr><td> {X,Y,Z} = {222,def,”cat”}</td><td style="text-align:left">成功：X = 222,Y = def, Z = “cat”</td></tr><tr><td> {X,Y} = {222,def,”cat”}</td><td style="text-align:left">失败：元组的形状不同</td></tr><tr><td> X = true</td><td style="text-align:left">成功：X = true</td></tr><tr><td> [H\</td><td style="text-align:left">T] = [1,2,3,4,5]</td><td>成功: H = 1,T = [2,3,4,5]</td></tr><tr><td> [A,B,C\</td><td style="text-align:left">T] = [a,b,c,d,e,f]</td><td>成功：A=a,B=b,C=c,T=[d,e,f]</td></tr></tbody></table><hr><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><ol><li>模块是Erlang的基本代码单元，模块保存在扩展名为<code>.erl</code>的文件里,而且必须先编译，才能运行模块里的代码。编译后的模块以<code>.beam</code>作为扩展名<center>待续</center></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;Erlang：函数式编程，消息传递，容错，高并发。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Erlang" scheme="http://hellolife.top/categories/Erlang/"/>
    
    
      <category term="Erlang" scheme="http://hellolife.top/tags/Erlang/"/>
    
      <category term="函数式编程" scheme="http://hellolife.top/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
