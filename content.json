{"meta":{"title":"yuangy's blog","subtitle":null,"description":"竹杖芒鞋轻胜马","author":"yuangy","url":"http://hellolife.top"},"pages":[{"title":"分类","date":"2018-07-31T03:53:06.000Z","updated":"2018-08-01T02:17:35.414Z","comments":false,"path":"categories/index.html","permalink":"http://hellolife.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-31T03:52:55.000Z","updated":"2018-08-01T03:31:41.463Z","comments":false,"path":"tags/index.html","permalink":"http://hellolife.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-31T03:53:20.000Z","updated":"2018-08-01T04:12:46.295Z","comments":false,"path":"about/index.html","permalink":"http://hellolife.top/about/index.html","excerpt":"","text":"一个在路上的菜鸟程序员，个人QQ（1483782149），奉上一首很喜欢的词： 定风波·莫听穿林打叶声宋代：苏轼 三月七日，沙湖道中遇雨。雨具先去，同行皆狼狈，余独不觉，已而遂晴，故作此词。 莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。"}],"posts":[{"title":"Erlang基础","slug":"erlang基础","date":"2018-08-01T07:42:48.471Z","updated":"2018-08-01T08:36:19.031Z","comments":true,"path":"2018/08/01/erlang基础/","link":"","permalink":"http://hellolife.top/2018/08/01/erlang基础/","excerpt":"Erlang：函数式编程，消息传递，容错，高并发。","text":"Erlang：函数式编程，消息传递，容错，高并发。 语句和注释 “ . ”作为一条语句结束（参考英语句子） “ ; ”连接的语句表示“或”，“ , ”连接的语句表示“且” (参考when关卡) “%”来做行注释123451&gt; F = fun(A,B) when is_number(A),is_number(B) -&gt; A+B end. #Fun&lt;erl_eval.12.52032458&gt;2&gt; F(3,4). 73&gt; 基本类型 number：erlang中的整数是精确到，也就是说不像其他编程语言（java）中有short，int，long的说法。 浮点数：erlang在内部使用64位的IEEE754-1985，因此也会存在像C中的取整和精度问题。 原子：原子被用来表示常量值（类似java中的枚举），原子是全局性的，而且不需要宏定义或包含文件就能实现，原子以小写字母开头，后接一串字母、数字、下划线、@符号，原子还可以放在单引号&#39;&#39;内，这样定义原子的规则便没那么严格了，例如&#39;Monday&#39;、&#39;+&#39;,另外，原子的值就是原子本身。 元组：大括号包起来，里面用逗号隔开的一种erlang数据类型，通常元组第一位用一个语义化的原子值占位。 列表：被用来存放任意数据类型任意数量的数据类型，类似js中的数组。 字符串：双引号包起来，严格来说，erlang中没有字符串，其本质就是列表。所以一般如果你想用真·字符串的时候，用Erlang的Binary类型，这样表示：&lt;&lt;”abc”&gt;&gt;。 二进制型与位串：在二进制里使用整数时，必须属于0~255这个范围。二进制型&lt;&lt;”cat”&gt;&gt;是&lt;&lt;99,97,116&gt;&gt;的简写形式，也就是说，这个二进制型是由字符串里这些字符的ASCII编码组成的。12345678910111213141&gt; 1. %% 整数12&gt; 1.2 . %% 浮点数1.23&gt; a. %% 原子a4&gt; &#123;point,1,2&#125;. %% 元组&#123;point,1,2&#125;5&gt; [1,2,3]. %% 列表[1,2,3]6&gt; \"1,2,3\". %% 字符串\"1,2,3\"7&gt; &lt;&lt;\"cat\"&gt;&gt;. %% 二进制与位串&lt;&lt;\"cat\"&gt;&gt; 变量与模式匹配erlang中不存在赋值的概念，只有变量绑定值，而且一次绑定不可改变，即“一次性赋值”。变量必须首字母大写。变量与值绑定用“=”表示，称为一次模式匹配操作。模式匹配的一些例子： 模式 = 单位 结果 {X,abc} = {123,abc} 成功:X=123 {X,Y,Z} = {222,def,”cat”} 成功：X = 222,Y = def, Z = “cat” {X,Y} = {222,def,”cat”} 失败：元组的形状不同 X = true 成功：X = true [H&#124;T] = [1,2,3,4,5] 成功: H = 1,T = [2,3,4,5] [A,B,C&#124;T] = [a,b,c,d,e,f] 成功：A=a,B=b,C=c,T=[d,e,f] Modules 模块是Erlang的基本代码单元，模块保存在扩展名为.erl的文件里,而且必须先编译，才能运行模块里的代码。编译后的模块以.beam作为扩展名待续","categories":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/categories/Erlang/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/tags/Erlang/"},{"name":"函数式编程","slug":"函数式编程","permalink":"http://hellolife.top/tags/函数式编程/"}]}]}