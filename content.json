{"meta":{"title":"突然冷风吹","subtitle":null,"description":"竹杖芒鞋轻胜马","author":"yuangy","url":"http://hellolife.top"},"pages":[{"title":"404","date":"2018-08-01T15:44:03.000Z","updated":"2018-08-01T15:44:37.509Z","comments":true,"path":"404/index.html","permalink":"http://hellolife.top/404/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-31T03:53:20.000Z","updated":"2018-08-01T04:12:46.295Z","comments":false,"path":"about/index.html","permalink":"http://hellolife.top/about/index.html","excerpt":"","text":"一个在路上的菜鸟程序员，个人QQ（1483782149），奉上一首很喜欢的词： 定风波·莫听穿林打叶声宋代：苏轼 三月七日，沙湖道中遇雨。雨具先去，同行皆狼狈，余独不觉，已而遂晴，故作此词。 莫听穿林打叶声，何妨吟啸且徐行。竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。料峭春风吹酒醒，微冷，山头斜照却相迎。回首向来萧瑟处，归去，也无风雨也无晴。"},{"title":"分类","date":"2018-07-31T03:53:06.000Z","updated":"2018-08-01T02:17:35.414Z","comments":false,"path":"categories/index.html","permalink":"http://hellolife.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-31T03:52:55.000Z","updated":"2018-08-01T03:31:41.463Z","comments":false,"path":"tags/index.html","permalink":"http://hellolife.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Erlang-gen_server","slug":"Erlang中的gen_server","date":"2018-08-06T09:47:52.891Z","updated":"2018-08-06T09:51:52.044Z","comments":true,"path":"1593793e.html","link":"","permalink":"http://hellolife.top/1593793e.html","excerpt":"1, start_link12start_link() -&gt; gen_server:start_link(&#123;local, ch3&#125;, ch3, [], []) =&gt; &#123;ok, Pid&#125; 调用gen_server:start_link/4，创建并且注册一个新进程 第一个参数：local表示在本地注册，用模块名ch3作为进程注册的名称 第二个参数：回调模块的名字，因为gen_server的接口函数和回调函数是在同一个模块里面，所以 这里也为ch3 第三个参数：[]这个为gen_server:start_link内部调用init（回调函数）时，给init传递的参数 第四个参数：[]是参数的列表123Options ::= [&#123;timeout, Timeout&#125; | &#123;debug, [Flag]&#125;]%%% Flag ::= trace | log | &#123;logfile, File&#125; | statistics | debug%%% (debug == log &amp;&amp; statistics)","text":"1, start_link12start_link() -&gt; gen_server:start_link(&#123;local, ch3&#125;, ch3, [], []) =&gt; &#123;ok, Pid&#125; 调用gen_server:start_link/4，创建并且注册一个新进程 第一个参数：local表示在本地注册，用模块名ch3作为进程注册的名称 第二个参数：回调模块的名字，因为gen_server的接口函数和回调函数是在同一个模块里面，所以 这里也为ch3 第三个参数：[]这个为gen_server:start_link内部调用init（回调函数）时，给init传递的参数 第四个参数：[]是参数的列表123Options ::= [&#123;timeout, Timeout&#125; | &#123;debug, [Flag]&#125;]%%% Flag ::= trace | log | &#123;logfile, File&#125; | statistics | debug%%% (debug == log &amp;&amp; statistics) 2, 同步调用–call 12do_some() -&gt; gen_server:call(ch3, alloc). 第一个参数：ch3是注册的gen_server进程名字 第二个参数：是具体传递的参数，为term()，即erlang数据类型 第三个参数：超时时间int 请求以消息的形式发给gen_server进程ch3，当gen_server进程收到消息后回调handle_call(Request, From, State),它应返回一个元组 {reply, Reply, State1}。Reply是需要回馈给客户端的答复，同时 State1 是gen_server的状态的新值。 3，异步请求——Cast异步请求 free(ch) 使用 gen_server:cast/2 实现：12free(Ch) -&gt; gen_server:cast(ch3, &#123;free, Chr&#125;). ch3 是gen_server的名称。 {free, Ch} 是实际的请求。 请求被装在一个消息中发给gen_server的 cast ，这调用了 free ，然后返回了 ok 。 当gen_server收到请求之后，它会调用 handle_cast(Request, Stats) ，会返回一个元组 {noreply, State1} 。 State1 是gen_server状态的新值。 handle_cast({free, Ch}, Chs) -&gt; Chs2 = free(Ch, Chs), {noreply, Chs2}.在这里，新的状态便是更新过的可用频道列表 Chs2 。gen_server现在又可以接受新的请求了。 4, 停止在==监督树中==若gen_server是某个监督树的一部分，则无需停止函数。它的督程会自动终止它。它的具体做法由督程中设置的 关闭策略 定义。 如果在终止之前需要进行一些清理工作，那么关闭策略必须是一个超时值，同时gen_server必须在 init 函数中设置为捕获退出信号。当gen_server被要求关闭时，它就会调用回调函数12345678910111213terminate(shutdown, State) ：init(Args) -&gt; ..., process_flag(trap_exit, true), ..., &#123;ok, State&#125;....terminate(shutdown, State) -&gt; ..code for cleaning up here.. ok. 5, 独立Gen_Server如果gen_server并非某个监督树的一部分，那么可以用一个停止函数，例如： 1234567891011121314151617...export([stop/0])....stop() -&gt; gen_server:cast(ch3, stop)....handle_cast(stop, State) -&gt; &#123;stop, normal, State&#125;;handle_cast(&#123;free, Ch&#125;, State) -&gt; .......terminate(normal, State) -&gt; ok. 回调函数处理 stop 请求并返回一个元组 {stop, normal, State1} ，其中 normal 表示这是一个正常的终止， State1 是gen_server状态的新值。这会引发gen_server调用 terminate(normal, State1) 来优雅地终止。 6, 处理其他消息如果要想gen_server还能处理请求之外的消息，必须实现回调函数 handle_info(Info, State) 来处理他们。例如，如果gen_server联结到其它进程（非督程）上并捕获退出信号，那么其它的消息就有退出消息。 123handle_info(&#123;&apos;EXIT&apos;, Pid, Reason&#125;, State) -&gt; ..code to handle exits here.. &#123;noreply, State1&#125;. 参考链接：[1] 腾讯云开发者手册[2] Erlang在线手册","categories":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/categories/Erlang/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/tags/Erlang/"},{"name":"Gen_server","slug":"Gen-server","permalink":"http://hellolife.top/tags/Gen-server/"},{"name":"OTP","slug":"OTP","permalink":"http://hellolife.top/tags/OTP/"}]},{"title":"Erlang-ETS存储数据","slug":"Erlang-ETS存储数据","date":"2018-08-06T09:08:08.447Z","updated":"2018-08-06T09:38:42.500Z","comments":true,"path":"9e399184.html","link":"","permalink":"http://hellolife.top/9e399184.html","excerpt":"ETS(Erlang Term Storage)Erlang数据存储（内存级别） ETS有四种表类型：异键(Set)、有序异键(ordered_set)、同键(bag)、副本同键(duplicate_bag) Set：键唯一 ordered_set：键唯一，元组会被排序 bag：多个元组可拥有相同的键，但不能有两个完全相同的元组（同键不同组） duplicate_bag：多个元组可拥有相同的键，且可以有多个相同的元组（同键亦同组）","text":"ETS(Erlang Term Storage)Erlang数据存储（内存级别） ETS有四种表类型：异键(Set)、有序异键(ordered_set)、同键(bag)、副本同键(duplicate_bag) Set：键唯一 ordered_set：键唯一，元组会被排序 bag：多个元组可拥有相同的键，但不能有两个完全相同的元组（同键不同组） duplicate_bag：多个元组可拥有相同的键，且可以有多个相同的元组（同键亦同组） 一，创建表1ets:new(Name,Options) %% 返回一个表标识符，唯一标识该表 参数 Name：表名 Options：参数列表当Options为[]时，默认参数相当于[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}]第一个选项：==set== | ==ordered_set== | ==bag== | ==duplicate_bag==第二个选项：private（唯有主管进程可读写），public（任何进程都可读写），protected（主管进程可读写，其他进程可读）named_table：如果设置此项，Name就可以被用于后续操作，相当于表标识符{keypos,K}：用K作为键的位置 1234567891011121314151617181920new(Name, Options) -&gt; tid() | atom() Types: Name = atom() Options = [Option] Option = Type | Access | named_table | &#123;keypos, Pos&#125; | &#123;heir, Pid :: pid(), HeirData&#125; | &#123;heir, none&#125; | Tweaks Type = type() Access = access() Tweaks = &#123;write_concurrency, boolean()&#125; | &#123;read_concurrency, boolean()&#125; | compressed Pos = integer() &gt;= 1 HeirData = term() 二，删除表12ets:delete(TableId)ets:delete(TableId,Key) 三，插入表1ets:insert(Tab,objectOrObjects) 四，查询表12ets:lookup(Tab,Key) %%根据键查询ets:i(Tab) %% 展示，没错，仅仅是展示所有记录 match，match_object的查询 关于match/3和match/1点击了解更多match/1和match/3信息ets:match(Tab,Pattern,Limit)：Pattern通常为&#39;$数字&#39;这样的原子类型，表示占位符（当有两个相同占位符时，表示这两个位置上的元素要相同）即要显示的结果 ，或{&#39;_&#39;,dog,&#39;$1&#39;}这样的元组，&#39;_&#39;表示通配符。Limit表示拿出几条记录，int型。 123456789101&gt; Tab = ets:new(ets_tab, [named_table, bag]),ets:insert(Tab, [&#123;apple, 1&#125;, &#123;pear, 2&#125;, &#123;orange, 3&#125;, &#123;grape, 4&#125;, &#123;watermelon, 5&#125;,&#123;apple,6&#125;]). %% 创建表，并向表里插入数据true2&gt; &#123;M1, C1&#125; = ets:match(ets_tab, &#123;apple,'$1'&#125;, 2). %%匹配表里第一个元素为apple， %%第二个占位表示将表里每条记录的第二个元素存到M1里面，以如下形式 %% '$end_of_table'表示以这种匹配条件，没有更多的数据在表里&#123;[[1],[6]],'$end_of_table'&#125; 3&gt; &#123;M2, C2&#125; = ets:match(ets_tab, &#123;'_','$1'&#125;, 2). %% 表示第一位通配，第二位占位 &#123;[[3],[2]],&#123;ets_tab,22,2,&lt;&lt;&gt;&gt;,[],0&#125;&#125;4&gt; &#123;M3, C3&#125; = ets:match(C2). %% 调用 match/1 继续匹配C2 &#123;[[1],[6]],&#123;ets_tab,101,2,&lt;&lt;&gt;&gt;,[],0&#125;&#125; 类似的还有ets:match_object/3和ets:match_object/1。 关于ets:match/2和ets:match_object/2，参数都为Tab和Pattern个人理解：match系列方法中，当做了“筛选条件”的位置的元素，便不会输出。因此，当需要获得符合条件的记录的全部元素时，建议使用其他方法，比如match_object。 match与match_object的区别：match_object会返回符合匹配条件的记录的所有元素，因此占位符&#39;$数字&#39;与&#39;_&#39;区别不大，另外match里匹配到的记录都为列表，match_object匹配到的每条记录都是元组。 select 的查询12341&gt; Tab = ets:new(ets_tab, [named_table, bag]),ets:insert(Tab, [&#123;apple, 1&#125;, &#123;pear, 2&#125;, &#123;orange, 3&#125;, &#123;grape, 4&#125;, &#123;watermelon, 5&#125;,&#123;apple,6&#125;]).true2&gt; ets:select(ets_tab,[&#123;&#123;'$1','$2'&#125;,[&#123;'=:=','$1',apple&#125;,&#123;'&lt;','$2',6&#125;],['$$']&#125;]). [[apple,1]] select/2第一个参数为Tab，第二个参数是一个列表或者是ets:fun2ms/1的返回值（其实该返回值也是列表），列表里面是一个固定格式的三个元素的元组。这个固定格式的三元组为 1&#123;&#123;第一个元素是一个元组，每个占位符对应记录的每一个元素&#125;，[第二个元素是一个关卡列表，里面包含多个用三元组描述的关卡表达式]，[第三个元素是实际返回值得描述列表]&#125; 第二个参数关卡示例： 1[&#123;is_integer, '$1'&#125;, &#123;is_integer, '$2'&#125;, &#123;'&lt;', &#123;'+', '$1', '$2'&#125;, 4711&#125;] 第三个参数返回列表描述示例： 123['$$']和['$_']表示返回所有元素['$1']表示仅返回'$1'占位的元素['$1','$2']表示返回'$2'占位的元素,伪函数表示为：ets:fun2ms(fun(&#123;M, N&#125;) when N &gt; 3 -&gt; N,M end). 所以只会返回后面的一个 ets:fun2ms/1作用是把语法函数转换为匹配规范的伪函数，使用前要引入-include_lib(&quot;stdlib/include/ms_transform.hrl&quot;).，因为匹配规范解析转换是在 ms_transform 模块里实现，具体细节请点击ets:fun2ms/1的使用 select/1和select/3参考ets:match系列函数 ETS手册","categories":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/categories/Erlang/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/tags/Erlang/"},{"name":"ETS","slug":"ETS","permalink":"http://hellolife.top/tags/ETS/"}]},{"title":"Mnesia数据库","slug":"Mnesia数据库","date":"2018-08-06T08:49:22.139Z","updated":"2018-08-06T08:58:13.356Z","comments":true,"path":"13754dc.html","link":"","permalink":"http://hellolife.top/13754dc.html","excerpt":"Mnesia数据库（内存，磁盘）创建/删除 数据库 创建/删除一个本地数据库： 12mnesia:create_schema([node()]). mnesia:delete_schema([node()]). 启动erlang时指定一个特定的数据库 1$ erl -mnesia dir '\"/home/Mnesia.company\"' %% /home/Mnesia.company是将要保存这个数据库的目录","text":"Mnesia数据库（内存，磁盘）创建/删除 数据库 创建/删除一个本地数据库： 12mnesia:create_schema([node()]). mnesia:delete_schema([node()]). 启动erlang时指定一个特定的数据库 1$ erl -mnesia dir '\"/home/Mnesia.company\"' %% /home/Mnesia.company是将要保存这个数据库的目录 开启/关闭 数据库 其中mnesia:wait_for_tables/2的作用：一些应用的某些表可能由于表数据很大，以至初始的适合需要一个初始等待的时间才能正常访问到该表的数据。mnesia:wait_for_tables/2 悬停等待一段时间，直到在 TabList 的所有表可以被访问，或超过等待的时间。12start() -&gt; mnesia:start(),mnesia:wait_for_tables([shop,cost],2000).stop() -&gt; mnesia:stop(). 创建表 create_table/21234%% create_table（Name，TabDef） - &gt; &#123;atomic，ok&#125; | &#123;aborted，Reason&#125;mnesia:create_table(table_name,[&#123;attributes,record_info(fields,shop)&#125;])%% 下面这个是官方示例mnesia:create_table(mnesia_table_name, [&#123;ram_copies, [node()]&#125;, &#123;disc_only_copies, nodes()&#125;, &#123;storage_properties, [&#123;ets, [compressed]&#125;, &#123;dets, [&#123;auto_save, 5000&#125;]&#125; ]&#125;]). record_info(type,record_name)：读取记录信息。type可为fields和size，分别为字段信息和长度信息。12345-record(shop,&#123;item, quantity, cost&#125;).test_record_info() -&gt; [record_info(fields,shop),record_info(size,shop)].调用test_record_info()输出： [[item,quantity,cost],4] %% 字段三个，长度为4 Name:表名 TabDef:列表，列表元素为{key，value}的元组，允许的元组有： 元组 默认值 可设值 说明 {access_mode，Atom} read_write read_write/read_only 访问模式：读写模式，只读模式 {attributes，AtomList} [key，val] 设置表的字段 {disc_copies，Nodelist} NodeList是一个Erlang的节点列表，这些节点将保存表的==磁盘副本==，同时==执行这个操作的节点==上还会创建一个的表的==内存副本==。 {disc_only_copies，Nodelist} NodeList是一个Erlang的节点列表，这些节点将==只==保存表的==磁盘副本== {ram_copies，Nodelist} NodeList是一个Erlang的节点列表，这些节点将保存表的==内存副本== {index，Intlist} Mnesia要构建和维护额外索引表的属性名称（原子）或记录字段的列表 {load_order，Integer} 0 具有最高加载顺序优先级的表在启动时首先加载。 {majority，Flag} true/false 为true，非脏更新中止 {record_name，Name} {snmp，SnmpStruct} {storage_properties，[{Backend，Properties}]} {type，Type} set set/ordered_set/bag/duplicate_bag 表类型 {local_content，Bool} false true/false 查询 构建查询的基本代码,即QLC查询，参数是一个列表推导，所以查询时，当然可以进行条件筛选查询甚至连接查询！ 1Q = qlc:q([X || X &lt;- mnesia:table(Table_Name)]) 执行QLC查询,将查询到结果以列表形式返回 1qlc:e(Q) 我们将qlc:e(Q)封装一下，在Mnesia事务内调用，使它变得“更为好用”。 1234do(Q) -&gt; F = fun() -&gt; qlc:e(Q) end, &#123;atomic,Val&#125; = mnesia:transaction(F), Val. 注意：qlc:q/1的参数必须是一个字面上的列表推倒，不能是通过求值得出的。举个例子，下面的代码与示例里的代码不是等价的。 12Var = [X || X &lt;- mnesia:table(shop)],qlc:q(Var) 添加行 下面是添加一行的记录示例，Row是待插入的记录。也是以在Mnesia事务内调用mnesia:write/1函数。1234add_shop_item(Name, Quantity, Cost) -&gt; Row = #shop&#123;item=Name, quantity=Quantity, cost=Cost&#125;, F = fun() -&gt; mnesia:write(Row) end, mnesia:transaction(F). 移除行 要移除某一行，需要知道该行的对象ID。它由表名和主键的值构成。下面是删除一行的记录示例。仍然是以Mnesia事务内调用mnesia:delete/1函数。1234remove_shop_item(Item) -&gt; Oid = &#123;shop,Item&#125;, F = fun() -&gt; mnesia:delete(Oid) end, mnesia:transaction(F). Mnesia中的事务：采用悲观锁策略 悲观锁：每当Mnesia事务管理器==开始访问==一个表时，==都==会根据上下文情况尝试==锁定==记录甚至整个表。如果它发现这可能导致死锁，就会立即中止事务并撤销之前所做的改动。 乐观锁：提交更新的时候，才会对数据锁定并检测，如果发现冲突了，则让用户返回错误的信息，让用户决定如何去做。 F是一个不带参数的fun，事务的特性是：F里的读写操作要么都成功，要么都不成功。1234567do_someting(...) -&gt; F = fun() -&gt; mnesia:write(Row), mnesia:delete(Oid), qlc:e(Q) end,mnesia:transaction(F)","categories":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/categories/Erlang/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/tags/Erlang/"},{"name":"Mnesia","slug":"Mnesia","permalink":"http://hellolife.top/tags/Mnesia/"}]},{"title":"Erlang基础","slug":"erlang基础","date":"2018-08-02T01:13:28.084Z","updated":"2018-08-06T09:14:52.805Z","comments":true,"path":"3380.html","link":"","permalink":"http://hellolife.top/3380.html","excerpt":"Erlang：函数式编程，消息传递，容错，高并发。","text":"Erlang：函数式编程，消息传递，容错，高并发。 语句和注释 “ . ”作为一条语句结束（参考英语句子） “ ; ”连接的语句表示“或”，“ , ”连接的语句表示“且” (参考when关卡) “%”来做行注释123451&gt; F = fun(A,B) when is_number(A),is_number(B) -&gt; A+B end. #Fun&lt;erl_eval.12.52032458&gt;2&gt; F(3,4). 73&gt; 基本类型 number：erlang中的整数是精确到，也就是说不像其他编程语言（java）中有short，int，long的说法。 浮点数：erlang在内部使用64位的IEEE754-1985，因此也会存在像C中的取整和精度问题。 原子：原子被用来表示常量值（类似java中的枚举），原子是全局性的，而且不需要宏定义或包含文件就能实现，原子以小写字母开头，后接一串字母、数字、下划线、@符号，原子还可以放在单引号&#39;&#39;内，这样定义原子的规则便没那么严格了，例如&#39;Monday&#39;、&#39;+&#39;,另外，原子的值就是原子本身。 元组：大括号包起来，里面用逗号隔开的一种erlang数据类型，通常元组第一位用一个语义化的原子值占位。 列表：被用来存放任意数据类型任意数量的数据类型，类似js中的数组。 字符串：双引号包起来，严格来说，erlang中没有字符串，其本质就是列表。所以一般如果你想用真·字符串的时候，用Erlang的Binary类型，这样表示：&lt;&lt;”abc”&gt;&gt;。 二进制型与位串：在二进制里使用整数时，必须属于0~255这个范围。二进制型&lt;&lt;”cat”&gt;&gt;是&lt;&lt;99,97,116&gt;&gt;的简写形式，也就是说，这个二进制型是由字符串里这些字符的ASCII编码组成的。12345678910111213141&gt; 1. %% 整数12&gt; 1.2 . %% 浮点数1.23&gt; a. %% 原子a4&gt; &#123;point,1,2&#125;. %% 元组&#123;point,1,2&#125;5&gt; [1,2,3]. %% 列表[1,2,3]6&gt; \"1,2,3\". %% 字符串\"1,2,3\"7&gt; &lt;&lt;\"cat\"&gt;&gt;. %% 二进制与位串&lt;&lt;\"cat\"&gt;&gt; 变量与模式匹配erlang中不存在赋值的概念，只有变量绑定值，而且一次绑定不可改变，即“一次性赋值”。变量必须首字母大写。变量与值绑定用“=”表示，称为一次模式匹配操作。模式匹配的一些例子： 模式 = 单位 结果 {X,abc} = {123,abc} 成功:X=123 {X,Y,Z} = {222,def,”cat”} 成功：X = 222,Y = def, Z = “cat” {X,Y} = {222,def,”cat”} 失败：元组的形状不同 X = true 成功：X = true [H&#124;T] = [1,2,3,4,5] 成功: H = 1,T = [2,3,4,5] [A,B,C&#124;T] = [a,b,c,d,e,f] 成功：A=a,B=b,C=c,T=[d,e,f] Modules 模块是Erlang的基本代码单元，模块保存在扩展名为.erl的文件里,而且必须先编译，才能运行模块里的代码。编译后的模块以.beam作为扩展名待续","categories":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/categories/Erlang/"}],"tags":[{"name":"Erlang","slug":"Erlang","permalink":"http://hellolife.top/tags/Erlang/"},{"name":"函数式编程","slug":"函数式编程","permalink":"http://hellolife.top/tags/函数式编程/"}]}]}